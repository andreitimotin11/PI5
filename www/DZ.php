<?php
/**
 * Created by PhpStorm.
 * User: Andrei
 * Date: 28.07.2017
 * Time: 19:46
 */
/*
1. Создайте класс GuestBook, который будет удовлетворять следующим требованиям:
 - В конструктор передается путь до файла с данными гостевой книги, в нём же происходит чтение данных из нее (используйте защищенное свойство объекта для хранения данных)
 - Метод getData() возвращает массив записей гостевой книги
 - Метод append($text) добавляет новую запись к массиву записей
 - Метод save() сохраняет массив в файл
2.* Продумайте - какие части функционала можно вынести в базовый (родительский) класс TextFile, а какие - сделать в унаследованном от него классе GuestBook
3. Создайте класс Uploader в соответствии с требованиями:
 - В конструктор передается имя поля формы, от которого мы ожидаем загрузку файла
 - Метод isUploaded() проверяет - был ли загружен файл от данного имени поля
 - Метод upload() осуществляет перенос файла (если он был загружен!) из временного места в постоянное
4.* Попробуйте некоторые методы заканчивать конструкцией return $this; и придумайте этому применение

 */
?>
<html>
<head>
    <title>OOP</title>
</head>
<body>
<?php


class GuestBook
{
	protected $path;
	
	public function getData()
	{
		//Метод getData() возвращает массив записей гостевой книги
		$data = file($this->path);
		return $data;
		
	}
	
	public function append($text)
	{
		//Метод append($text) добавляет новую запись к массиву записей
		$data = $this->getData();
		array_push($data, $text);
		var_dump($data);
		return $data;
	}
	
	public function save()
	{
		//Метод save() сохраняет массив в файл
	}
	
	public function __construct($path)
	{
	    //В конструктор передается путь до файла с данными гостевой книги, в нём же происходит
      // чтение данных из нее (используйте защищенное свойство объекта для хранения данных)
		$this->path = $path;
	}
	
}
$b1 = new GuestBook('guestbook');
;
//var_dump($b1->getData(  'Trulala'));
var_dump($b1->append('Trulala'));
?>
</body>
</html>
